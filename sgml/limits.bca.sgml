<!-- Copyright 2021. TIBCO Software Inc. -->
<!-- This file is subject to the license terms contained -->
<!-- in the license file that is distributed with this file. -->

<!doctype s-function-doc system "s-function-doc.dtd" [
<!entity % S-OLD "INCLUDE">
]
>
<s-function-doc>
<s-topics>
   <s-topic>limits.bca</s-topic>
</s-topics>
<s-title>
Calculate BCa Confidence Limits 
</s-title>
<s-description>
Calculates BCa (accelerated bias-corrected) or BC (bias-corrected) 
bootstrap confidence limits. 
</s-description>
<s-usage>
<s-old-style-usage>
limits.bca(boot.obj, probs=c(0.025, 0.05, 0.95, 0.975), 
           details=F, z0=NULL, acceleration=NULL, 
           group.size=NULL, frame.eval = &lt;&lt;see below&gt;&gt;, 
           subset.statistic=1:p, narrow=F) 
</s-old-style-usage>
</s-usage>
<s-args-required>
<s-arg name="boot.obj">
object of class 
<s-function name="bootstrap.sgm">bootstrap</s-function>. 
</s-arg>
</s-args-required>
<s-args-optional>
<s-arg name="probs">
probabilities for one-sided confidence limits; e.g. c(.025, .975) gives 
a two-sided 95% confidence interval. 
Note that values are undefined at 0 and 1. 
</s-arg>
<s-arg name="details">
logical flag indicating whether to return the values of <code>z0</code>, <code>acceleration</code>, 
<code>group.size</code>, and the adjusted probability levels for each BCa confidence 
limit 
along with the BCa limits.  If <code>details=F</code>, only the BCa confidence limits are 
returned. 
</s-arg>
<s-arg name="z0">
bias-correction factor; by default this is estimated from the bootstrap results. 
It may also be calculated by 
<s-function name="influence.sgm">influence</s-function>. 
</s-arg>
<s-arg name="acceleration">
acceleration factor. 
By default this is estimated from the <code>L</code> component of <code>boot.obj</code>, 
if it is present, otherwise using 
<s-function name="jackknife.sgm">jackknife</s-function>. 
In the latter case, the statistic must allow samples of reduced size; 
see 
<s-function name="resamp.problems.sgm">resamp.problems</s-function>. 
It may also be calculated by 
<s-function name="influence.sgm">influence</s-function>. 
</s-arg>
<s-arg name="group.size">
number of observations to jackknife from each sample when calculating 
<code>acceleration</code>.  It is time consuming to do a full delete-1 jackknife 
if <code>n</code> is large, so the 
default is to use a group size of <code>floor(n/20)</code>, which yields roughly 20 
groups of points, and hence 20 jackknife replicates.  For the full jackknife, 
use <code>group.size=1</code>. 
</s-arg>
<s-arg name="frame.eval">
frame where the data and other objects used when creating <code>boot.obj</code> can be found. 
You need to specify this if objects can't be found by their 
original names, or have changed; see 
<s-function name="frame.eval.sgm">frame.eval</s-function>. 
</s-arg>
<s-arg name="subset.statistic">
subscript expression; if the statistic that was bootstrapped has 
length greater than 1, use this to request intervals for only some 
elements (parameters) of the statistic. 
</s-arg>
<s-arg name="narrow">
logical, determines how quantiles are computed.  If <code>narrow=FALSE</code> 
(the default), then intervals are wider and coverage probabilities 
generally more accurate than with <code>narrow=TRUE</code>. 
</s-arg>
</s-args-optional>

<s-value>
if <code>details=F</code>, 
returns a matrix of BCa confidence limits with one row per 
parameter of interest. 
Otherwise, returns a list with components: 
<s-return-component name="limits">
the BCa confidence limits. 
</s-return-component>
<s-return-component name="z0, acceleration, emp.probs">
quantities used in calculating BCa limits. 
</s-return-component>
</s-value>

<s-details>
If <code>acceleration</code> or <code>z0</code> are large and requested probabilities are 
near 0 or 1, BCa limits are inaccurate, and may be ill-defined. 
If ill-defined the largest or smallest bootstrap replicate is returned. 
A warning about accuracy is provided if the adjusted probability levels 
and number of bootstrap replications are such that the limits are 
determined by a small number (currently 5) of the smallest or largest bootstrap 
replicates. 
<p>
The values of <code>z0</code> and <code>acceleration</code> estimated by 
<s-function name="influence.sgm">influence</s-function> 
and the <code>acceleration</code> value estimated 
by this function based on calling 
<s-function name="jackknife.sgm">jackknife</s-function> 
or using the <code>L</code> component of <code>boot.obj</code> 
assume that the bootstrap sample size is the number of observations 
in the original data -- i.e. that you are not using the <code>size</code> 
argument to the <code>sampler</code> passed to 
<s-function name="bootstrap.sgm">bootstrap</s-function>. 
Multiply those values by 
<code>sqrt(n/size)</code> to correct for the <code>size</code> argument. 
<p>
This function assumes that <code>boot.obj</code> was created by ordinary 
bootstrapping, or something similar (the <code>sampler</code> argument to 
bootstrap could be <code>samp.bootstrap</code>, <code>samp.boot.bal</code>, or 
<code>samp.bootknife</code>, with <code>size=n</code>). 
If these assumptions are violated the intervals may be incorrect. 
<p>
Bootstrap BC (bias-corrected) intervals can be obtained by setting 
<code>acceleration=0</code>. 
<p>
<code>z0</code> and <code>acceleration</code> should have length equal 
to the length of the <code>observed</code> component of <code>boot.obj</code>. 
</s-details>

<s-section name="REFERENCES">
Davison, A.C. and Hinkley, D.V. (1997), 
<it>Bootstrap Methods and Their Application,</it>
Cambridge University Press. 
<p>
Efron, B. and Tibshirani, R.J. (1993), 
<it>An Introduction to the Bootstrap,</it>
San Francisco: Chapman &#38; Hall. 
</s-section>

<s-see>
<s-function name="bootstrap.sgm">bootstrap</s-function>,  
<s-function name="jackknife.sgm">jackknife</s-function>,  
<s-function name="limits.percentile.sgm">limits.percentile</s-function>,  
<s-function name="frame.eval.sgm">frame.eval</s-function>.
</s-see>

<s-examples>
<s-example type = text>
temp <- bootstrap(stack.loss, var) 
limits.bca(temp) 
limits.bca(temp, details=T) 
 
infl <- influence(stack.loss, var) 
limits.bca(temp, z0 = infl$estimate$z0, 
           acceleration  = infl$estimate$acceleration) 
</s-example>
</s-examples>
<s-keywords>
<s-keyword>bootstrap</s-keyword>
<s-keyword>resample</s-keyword>
</s-keywords>
<s-docclass>
function
</s-docclass>
</s-function-doc>
