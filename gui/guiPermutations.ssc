#############################################################################
# This file contains the gui specs for
# the dialog box that comes up when you select from the SPlusMenuBar
#   "Statistics"  "Resample"  "Permutations..."
# The dialog box is named "Permutations"
#
# This file also contains the following functions:
#   callBackPerm  - the call back function
#   menuPerm  - the menu function
#   createMenuPerm  - the call that
#      adds "Permutations..." to the menu
#   removeMenuPerm  - the call that
#      removes "Permutations..." from the menu
#
#############################################################################


######################################################################
# permPage_Model PAGE
######################################################################
newProperty(Name = "permPage_Model", Type = "Page",
	    DialogPrompt = "Model",
	    PropertyList = c(
	      "resampGroup_Data",
	      # "resamp_Space1",
	      "resampGroup_Data2",
	      "resampGroup_Statistic",
	      "resampGroup_Additional",
	      "resamp_Space1",
	      "resamp_Space2",
	      "resampGroup_alternative",
	      "resampGroup_permuteCols",
	      "resamp_Space3",
	      "resamp_Space4",
	      "resamp_Space5",
	      "resamp_Space6",
	      "resamp_Space7",
	      #	    "resamp_Space8",
	      "resampGroup_SavePerm",
	      #	    "resamp_Space9",
	      #	    "resamp_Space10",
	      )
	    )




######################################################################
# permPage_Options
######################################################################

newProperty(Name = "permPage_Options", Type = "Page",
	    DialogPrompt = "Options",
	    PropertyList = c(
	      "resampGroup_OptionsPerm"
	      )
	    )

######################################################################
# permPage_Results  (includes plots)
######################################################################

newProperty(Name = "permPage_Results", Type = "Page",
	    DialogPrompt = "Results",
	    PropertyList = c(
	      "resampGroup_SummaryPerm",
	      "resampGroup_Plots"
	      )
	    )



######################################################################
#
# menuPerm
#
######################################################################

resampFormatArgumentList <- function(...){
  v <- c(...)
  paste("#", seq(from=0, length=length(v)), "=", v, sep="")
}


newFunctionInfo(Name = "menuPerm",
		DialogHeader = "Permutation Test",
		CallBackFunction = "callBackPerm",
		HelpCommand = "help(\"function_menuPerm\")",
		PropertyList = c(
		  "permPage_Model",
		  "permPage_Options",
		  "permPage_Results"	# includes plots
		  ),

		ArgumentList = resampFormatArgumentList(
		  "SPropReturnObject",
		  "resamp_SaveAsPerm",
		  "resamp_Data",
		  "resamp_Statistic",
		  "resamp_treatment",
		  "resamp_Data2",
		  "resamp_permuteCols",
		  "resamp_UseRatio",
		  "resamp_alternative",
		  "resamp_strata",
		  "resamp_subject",
		  "resamp_Additional",
		  "resamp_B999",
		  "resamp_seed",
		  "resamp_trace",
		  "resamp_assignFrame1",
		  "resamp_SummaryStats",
		  "resamp_Correlation",
		  "resamp_Percentiles",
		  "resamp_Levels",
		  "resamp_SaveSummary",
		  "resamp_Histogram",
		  "resamp_QQ",
		  "resamp_PlotBoth"
		  )
		)

rm(resampFormatArgumentList)



menuPerm <-
  function(boot.save.obj,
	   data,
	   statistic,
	   treatment,
	   data2,
	   resampleColumns,
	   useRatio,
	   alternative,

	   group,
	   subject,
	   additional.args,

	   B = 999,
	   seed,
	   trace,
	   assign.frame1,

	   summ.short = T,
	   summ.cor = F,
	   summ.emp = T,
	   summ.probs = ".025, .05, .95, .975",
	   summ.save.object,

	   plot.dist = F,
	   plot.QQ = F,
	   plot.both = T,
	   ...)
{
  DEBUG <- (exists( ".resample.debug" ) && .resample.debug)

  #
  # Set up permutationTest call
  fun.call <- match.call()

  if( DEBUG ) {
    cat( "AT BEGINNING of menu function.\n" )
    print( fun.call )
  }
  twoSample <- (!missing(treatment) || !missing(data2))
  fun.args <- is.element(arg.names(fun.call),
			if(twoSample) c(arg.names("permutationTest"),
					arg.names("permutationTest2"),
                                        arg.names("bootstrap.default"))
			else c(arg.names("permutationTest"),
                               arg.names("bootstrap.default")))
  fun.call[[1]] <- as.name(if(twoSample) "permutationTest2" else "permutationTest")
  fun.call <- fun.call[c(T, fun.args)]
  if(!missing(resampleColumns)){
    if(is.element(resampleColumns, c("<ALL>","")))
      fun.call$resampleColumns <- NULL
    else
      fun.call$resampleColumns <- guiAsColNames(resampleColumns, data)
  }
  if(useRatio == "Ratio") fun.call$ratio <- T

  # Simplify the call by removing some default values of arguments
  if(B == 999) fun.call$B <- NULL
  if(!trace) fun.call$trace <- NULL	# do not need default value
  if(!assign.frame1) fun.call$assign.frame1 <- NULL

  if( DEBUG )
    print( fun.call )

  if(!missing(additional.args))
    fun.call <- resampAddArgumentsToCall(fun.call, additional.args)

  if( DEBUG ) {
    cat( "\nnames( fun.call ):" )
    print(  names( fun.call ) )
    cat( "\nfun.call: " )
    print(  fun.call )
    cat( "\n" )
  }

  #
  # Call permutationTest (or permutationTest2)
  boot.obj <- eval( fun.call, local=F )

  if(!missing( boot.save.obj ))
    assign( boot.save.obj, boot.obj, where = 1, immediate = T )

  #
  # Call summary function:
  summ.obj <-
    tabSummary.permutationTest(boot.obj, summ.probs,
			       summ.emp,
			       correlations = summ.cor,
			       printSummary = summ.short)

  if( !missing( summ.save.object) && summ.save.object != "")
    assign( summ.save.object, summ.obj, where = 1, immediate = T)

  #
  # Call plot function:
  tabPlot.resamp(boot.obj, plot.dist, plot.QQ, plot.both )

  invisible( boot.obj )
}
# Changed permutationTest.default back to permutationTest; added
#  bootstrap.default (so pass arguments group, subject, seed, assign.frame1


callBackPerm <- function(dfp){
  # On InitDialog, initialize options for data2 (unnecessary for data)
  if(cbIsInitDialogMessage(dfp))
    dfp <- cbSetOptionList(dfp, "resamp_Data2",
			  cbGetOptionList(dfp, "resamp_Data"))
  # Use resamp_Data to set possible values for other fields:
  if(cbIsNewOrChange(dfp, "resamp_Data")){
    dfp <- callbackVarsFromDataFrame(dfp, "resamp_Data",
				    c("resamp_strata",
				      "resamp_subject",
				      "resamp_treatment"))
    # variables in "resamp_permuteCols"
    if(exists(dataName <- cbGetCurrValue(dfp, "resamp_Data"))) {
      dfp <- cbSetOptionList(dfp, "resamp_permuteCols",
			    cbGetColumnNamesString(dataName, prepend = "<ALL>"))
      if(!cbIsRollbackMessage(dfp))
        dfp <- cbSetCurrValue(dfp, "resamp_permuteCols",
			     guiGetSelectedCols(dataName, default = "<ALL>"))
    }
    else {
      dfp <- cbSetOptionList(dfp, "resamp_permuteCols", "")
      dfp <- cbSetCurrValue(dfp, "resamp_permuteCols", "")
    }
  }

  # Handle data2, treatment, and permuteCols (only one should be enabled)
  if(cbIsChange(dfp, "resamp_permuteCols")){
    # If we've changed permuteCols, en(dis)able others accordingly
    dfp <- cbSetEnableFlag(dfp,
			  c("resamp_treatment", "resamp_Data2"),
			  is.element(cbGetCurrValue(dfp, "resamp_permuteCols"),
				     c("", "<ALL>")))
  }
  else {
    # If Data2 or treatment changed, en(dis)able the other. (& other things)
    dfp <- callbackData2Resample(dfp)
    # If either of those changed, enable permuteCols only if both blank
    if(cbIsNewOrChange(dfp, c("resamp_treatment", "resamp_Data2"))){
      if(all(cbGetEnableFlag(dfp,
			     c("resamp_Data2",
			       "resamp_treatment")))){
	# Both are now blank, can enable permuteCols
	dfp <- cbSetEnableFlag(dfp, "resamp_permuteCols", T)
      }
      else {
	# Change permuteCols to <ALL>, then disable
	dfp <- cbSetCurrValue(dfp, "resamp_permuteCols", "<ALL>")
	dfp <- cbSetEnableFlag(dfp, "resamp_permuteCols", F)
      }
    }
  }

  return(dfp)
}



createMenuPerm <- function() {
  resample.name <- "SPlusMenuBar$Statistics$Resample"

  guiCreate( "MenuItem",
            Name = paste(resample.name,"$Permutations", sep=""),
            Type = "MenuItem",
            Action = "Function",
            MenuItemText = "Permutation Test...",
            Command = "menuPerm",
	    Overwrite = F,
            Index = "5",
	    )

  invisible()
}

removeMenuPerm <- function() {
  menu.item.name <- "SPlusMenuBar$Statistics$Resample$Permutations"
  if(is.element(menu.item.name, guiGetObjectNames("MenuItem")))
    guiRemove("MenuItem",Name=menu.item.name )

  invisible()
}


# createMenuPerm()

"Done with guiPermutations.ssc" # for script file input
