#############################################################################
# This file contains the gui specs for
# the dialog box that comes up when you select from the SPlusMenuBar
#   "Statistics"  "Resample"  "Bootstrap..."
# The dialog box is named "Bootstrap"
#
# This file also contains the following functions:
#   menuBootstrapResample  - the menu function
#   resampCallJAB, resampCallTAB - utilities used by the menu fun
#   callBackBootstrap  - the call back function
#   createMenuBootstrap  - the call that adds "Bootstrap..." to the menu
#   removeMenuBootstrap  - the call that removes "Bootstrap..." from the menu
#
#############################################################################


######################################################################
#
# bootPage_Model
#
######################################################################

newProperty(Name = "bootPage_Model", Type = "Page",
	    DialogPrompt = "Model",
	    PropertyList = c(
	      "resampGroup_Data",
	      # "resamp_Space1",
	      "resampGroup_Statistic",
	      "resampGroup_Additional",
	      "resampGroup_Data2",
	      "resamp_Space1",
	      "resamp_Space2",
	      "resamp_Space3",
	      "resamp_Space4",
	      "resamp_Space5",
	      "resamp_Space6",
	      "resamp_Space7",
	      "resamp_Space8",
	      "resampGroup_SaveBoot",
	      #	    "resamp_Space9",
	      #	    "resamp_Space10",
	      )
	    )


######################################################################
#
# bootPage_Options
#
######################################################################

newProperty(Name = "bootPage_Options", Type = "Page",
	    DialogPrompt = "Options",
	    PropertyList = c(
	      "resampGroup_OptionsBoot",
	      "bootGroup_LinearApprox" )
	    )

######################################################################
# bootGroup_LinearApprox  "Linear Approximation"
######################################################################

newProperty(Name = "bootGroup_LinearApprox", Type = "Group",
	    DialogPrompt = "Linear Approximation",
	    PropertyList = c(
	      "boot_LinearApproxL",
	      "boot_LinearApproxFormula"
	      )
	    )

newProperty(Name = "boot_LinearApproxL",
	    DialogControl = "Combo Box",
	    DialogPrompt = "L = ",
	    IsList = F,
	    Disable = F,
	    OptionList = c(
	      "choose",
	      "jackknife",
	      "influence",
	      "regression",
	      "ace",
	      "none"
	      ),
	    UseQuotes = T
	    )

newProperty(Name = "boot_LinearApproxFormula",
	    DialogControl = "String",
	    DialogPrompt = "Formula = ",
	    IsList = F,
	    Disable = T
	    )



######################################################################
#
# bootPage_Results  (includes plots)
#
######################################################################

newProperty(Name = "bootPage_Results", Type = "Page",
	    DialogPrompt = "Results",
	    PropertyList = c(
	      "resampGroup_SummaryBoot",
	      "resampGroup_Plots"
	      )
	    )



######################################################################
#
# bootPage_Diagnostics
#
######################################################################

newProperty(Name = "bootPage_Diagnostics", Type = "Page",
	    DialogPrompt = "Diagnostics",
	    PropertyList = c(
	      "bootGroup_DiagnosticsFunctional",
	      "bootGroup_DiagnosticsJAB",
	      "bootGroup_DiagnosticsTAB"    
	      )
	    )

######################################################################
# bootGroup_Diagnostics
######################################################################

newProperty(Name = "bootGroup_DiagnosticsFunctional", Type = "Group",
	    DialogPrompt = "Diagnostics",
	    PropertyList = c(
	      "boot_DiagnosticsFunctional"
	      )
	    )

newProperty(Name = "boot_DiagnosticsFunctional", Type =  "Normal",
	    DefaultValue =  "quantiles",
	    DialogPrompt = "&Functional:",
	    DialogControl = "Combo Box",
	    UseQuotes = T,
	    OptionList = names(resampFunctionalList)
	    )

######################################################################
# bootGroup_DiagnosticsJAB  (jackknifeAfterBootstrap)
# bootGroup_DiagnosticsTAB  (tiltAfterBootstrap)
######################################################################

newProperty(Name = "bootGroup_DiagnosticsJAB", Type = "Group",
	    DialogPrompt = "Jackknife After Bootstrap",
	    PropertyList = c(
	      "boot_DiagnosticsDoJAB",
	      "boot_DiagnosticsSaveJAB",
	      "boot_DiagnosticsPlotJAB",
	      "boot_DiagnosticsPlotJABinfluence"
	      )
	    )
copyProperty(Name = "bootGroup_DiagnosticsTAB",
	     OldName = "bootGroup_DiagnosticsJAB",
	     DialogPrompt = "Tilt After Bootstrap",
	     PropertyList = c(
	       "boot_DiagnosticsDoTAB",
	       "boot_DiagnosticsSaveTAB",
	       "boot_DiagnosticsPlotTAB"
	       )
	     )

newProperty(Name = "boot_DiagnosticsDoJAB",
	    DialogControl = "Check Box",
	    DialogPrompt = "Perform Jack After Boot",
	    Disable = F
	    )
copyProperty(Name = "boot_DiagnosticsDoTAB",
	     OldName = "boot_DiagnosticsDoJAB",
	     DialogPrompt = "Perform Tilt After Boot"
	     )

newProperty(Name = "boot_DiagnosticsSaveJAB",
	    DialogControl = "String",
	    DialogPrompt = "Save In",
	    Disable = T,
	    UseQuotes = T
	    )
copyProperty(Name = "boot_DiagnosticsSaveTAB",
	     OldName = "boot_DiagnosticsSaveJAB"
	     )

newProperty(Name = "boot_DiagnosticsPlotJAB",
	    DialogControl = "Check Box",
	    DialogPrompt = "Plot",
	    DefaultValue = T,
	    Disable = T
	    )
copyProperty(Name = "boot_DiagnosticsPlotJABinfluence",
	     OldName = "boot_DiagnosticsPlotJAB",
             DialogPrompt = "Plot Influence",
             DefaultValue = F,
	     )
copyProperty(Name = "boot_DiagnosticsPlotTAB",
	     OldName = "boot_DiagnosticsPlotJAB"
	     )




######################################################################
#
# menuBootstrapResample  FunctionInfo
# DialogHeader:  Bootstrap
#
######################################################################

resampFormatArgumentList <- function(...){
  v <- c(...)
  paste("#", seq(from=0, length=length(v)), "=", v, sep="")
}

    
newFunctionInfo(Name = "menuBootstrapResample",
		DialogHeader = "Bootstrap",
		CallBackFunction = "callBackBootstrap",
		HelpCommand = "help(\"function_menuBootstrapResample\")",
		PropertyList = c(
		  "bootPage_Model",
		  "bootPage_Options",
		  "bootPage_Results",	# includes plots
		  "bootPage_Diagnostics" ),

		ArgumentList = resampFormatArgumentList(
		  "SPropReturnObject",
		  "resamp_SaveAsBoot",
		  "resamp_Data",
		  "resamp_Statistic",
		  "resamp_treatment",
		  "resamp_Data2",
		  "resamp_UseRatio",
		  "resamp_sampler",
		  "resamp_strata",
		  "resamp_subject",
		  "resamp_Additional",
		  "resamp_B1000",
		  "resamp_seed",
		  "resamp_trace",
		  "resamp_assignFrame1",
		  "boot_LinearApproxL",
		  "boot_LinearApproxFormula",
		  "resamp_SummaryStats",
		  "resamp_Correlation",
		  "resamp_Percentiles",
		  "resamp_BCa",
		  "resamp_Tilting",
		  "resamp_tLimits",
		  "resamp_Levels",
		  "resamp_SaveSummary",
		  "resamp_Histogram",
		  "resamp_QQ",
		  "resamp_PlotBoth",
		  "boot_DiagnosticsFunctional",
		  "boot_DiagnosticsDoJAB",
		  "boot_DiagnosticsSaveJAB",
		  "boot_DiagnosticsPlotJAB",
		  "boot_DiagnosticsPlotJABinfluence",
		  "boot_DiagnosticsDoTAB",
		  "boot_DiagnosticsSaveTAB",
		  "boot_DiagnosticsPlotTAB"

		  ,"resamp_DataFrameList" # ignore this
		  )
		)

rm(resampFormatArgumentList)


menuBootstrapResample <-
  function(boot.save.obj,
	   data,
	   statistic,
	   treatment,
	   data2,
	   useRatio,

	   sampler,
	   group,
	   subject,
	   additional.args,

	   B = 1000,
	   seed,
	   trace,
	   assign.frame1,
	   L,
	   model.mat,

	   summ.short = T,
	   summ.cor = F,
	   summ.emp = T,
	   summ.bca = F,
	   summ.tilt = F,
	   summ.tLimits = F,
	   summ.probs = ".025, .05, .95, .975",
	   summ.save.object,

	   plot.dist = T,
	   plot.QQ = F,
	   plot.both = T,

	   diagnosticsFunctional = "Bias&SE",
	   do.JAB.p = F,
	   save.name.JAB = NULL,
	   plot.JAB.p = F,
	   plot.JABinfluence.p = F,
	   do.TAB.p = F,
	   save.name.TAB = NULL,
	   plot.TAB.p = F,
	   ...)
{
  DEBUG <- (exists( ".resample.debug" ) && .resample.debug)

  #
  # Set up bootstrap call
  fun.call <- match.call()

  if( DEBUG ) {
    cat( "AT BEGINNING of menu function.\n" )
    print( fun.call )
  }
  twoSample <- (!missing(treatment) || !missing(data2))
  fun.args <- is.element(arg.names(fun.call),
			if(twoSample) c(arg.names("bootstrap.default"),
					arg.names("bootstrap2"))
			else arg.names("bootstrap.default"))
  fun.call[[1]] <- as.name(if(twoSample) "bootstrap2" else "bootstrap")
  fun.call <- fun.call[c(T, fun.args)]
  if(useRatio == "Ratio") fun.call$ratio <- T

  # Simplify the call by removing some default values of arguments
  if(identical(substitute(sampler),
	       as.name("samp.bootstrap"))) fun.call$sampler <- NULL
  if(B == 1000) fun.call$B <- NULL
  if(!trace) fun.call$trace <- NULL	# do not need default value
  if(!assign.frame1) fun.call$assign.frame1 <- NULL

  if( DEBUG )
    print( fun.call )

  if(!missing(additional.args))
    fun.call <- resampAddArgumentsToCall(fun.call, additional.args)

  # If tilting, then evaluate L
  if(missing(L) && (summ.tilt || do.TAB.p))
    fun.call$L <- "choose"

  if( DEBUG ) {
    cat( "\nnames( fun.call ):" )
    print(  names( fun.call ) )
    cat( "\nfun.call: " )
    print(  fun.call )
    cat( "\n" )
  }

  #
  # Call bootstrap (or bootstrap2)
  boot.obj <- eval( fun.call, local=F )

  if(!missing( boot.save.obj ))
    assign( boot.save.obj, boot.obj, where = 1, immediate = T )

  #
  # Call summary function:
  summ.obj <- tabSummary.bootstrap(boot.obj, summ.probs,
				  printSummary = summ.short,
				  summ.emp, summ.bca,
				  correlations = summ.cor,
				  summ.tilt, summ.tLimits)

  if(!missing(summ.save.object) && summ.save.object != "")
    assign(summ.save.object, summ.obj, where = 1, immediate = T)

  #
  # Call plot function:
  tabPlot.resamp(boot.obj, plot.dist, plot.QQ, plot.both )

  # if( !missing( boot.save.object )) {
  #   if( boot.save.object != "" ) {
  #     assign( boot.save.object, boot.obj, where = 1, immediate = T)
  #   }
  # }

  # Diagnostics:  jackknife or tilting after bootstrap
  if( do.JAB.p || do.TAB.p )
    functionalExpr <-
      switch( mode( substitute( diagnosticsFunctional )),
	     character = substitute( diagnosticsFunctional ),
	     as.name( substitute( diagnosticsFunctional )))
  functionalExpr <- substitute(diagnosticsFunctional)

  # Call jackknife after bootstrap:
  if( do.JAB.p ) {
    jab <- resampCallJAB( boot.obj, diagnosticsFunctional,
			save.name.JAB,
			functionalExpr = functionalExpr,
			boot.save.obj,
			method = "jackknifeAfterBootstrap")
    cat("\n\t*** Jackknife After Bootstrap ***\n")
    print(jab)
    if(plot.JAB.p) plot(jab, graphical=T)
    if(plot.JABinfluence.p) plot(jab, graphical=F)
  }
  # Call tiltAfterBootstrap:
  if( do.TAB.p ) {
    tab <- resampCallJAB( boot.obj, diagnosticsFunctional,
			save.name.TAB,
			functionalExpr = functionalExpr,
			boot.save.obj,
			method = "tiltAfterBootstrap")
    cat( "\n\t*** Tilt After Bootstrap ***\n" )
    print( tab )
    if(plot.TAB.p) plot(tab)
  }
  invisible( boot.obj )
}



resampCallJAB <-
function( boot.obj, functional = mean,
	 save.name = NULL,
	 functionalExpr = NULL, boot.save.obj = NULL,
	 method = "jackknifeAfterBootstrap")
{
  # Utility function, called by menuBootstrapResample.
  # Create a call to either jackknifeAfterBootstrap or tiltAfterBootstrap,
  # then evaluate.

  # Construct the call to jackknifeAfterBootstrap.
  if(is.null(save.name)){
    newCall <- Quote(jackknifeAfterBootstrap(boot.obj, functional))
    if(method != "jackknifeAfterBootstrap")
      newCall[[1]] <- as.name(method)
    result <- eval( newCall )
  }
  else{
    # If we are to save the result, the call needs to look right,
    # with correct object names, so result can be duplicated.
    newCall <- call( method )
    newCall$boot.obj <- as.name( boot.save.obj )
    newCall$functional <-
      if(is.null( functionalExpr ))
        as.name(deparse(substitute( functional )))
      else
        functionalExpr
    result <- eval( newCall, local = F )
  }
  if(!is.null(save.name))
    assign(save.name, result, where = 1)

  invisible(result)
}



callBackBootstrap <- function(dfp){
  # Callback for menuBootstrapResample

  # On InitDialog, initialize options for data2 (unnecessary for data)
  if(cbIsInitDialogMessage(dfp))
    dfp <- cbSetOptionList(dfp, "resamp_Data2",
			  cbGetOptionList(dfp, "resamp_Data"))

  # Use resamp_Data to set possible values for other fields:
  if(cbIsNewOrChange(dfp, "resamp_Data"))
    dfp <- callbackVarsFromDataFrame(dfp, "resamp_Data",
				    c("resamp_strata",
				      "resamp_subject",
				      "resamp_treatment"))

  # Handle data2 and treatment
  dfp <- callbackData2Resample(dfp)	# only one may be enabled
  if(cbIsChange(dfp, c("resamp_treatment", "resamp_Data2")) ||
     cbIsRollbackMessage(dfp)) {
    if(all(cbGetCurrValue(dfp, c("resamp_treatment", "resamp_Data2")) == "")){
      # one-sample problem.  May do JAB & TAB diagnostics
      dfp <- cbSetEnableFlag(dfp, c("boot_DiagnosticsDoJAB",
				   "boot_DiagnosticsDoTAB"), T)
    }
    else {				# two-sample problem
      # Cannot do jackknifeAfterBootstrap for any two-sample problem
      dfp <- cbSetCurrValue(dfp, "boot_DiagnosticsDoJAB", F)
      dfp <- cbSetEnableFlag(dfp, c("boot_DiagnosticsDoJAB",
				   "boot_DiagnosticsPlotJAB",
				   "boot_DiagnosticsPlotJABinfluence",
				   "boot_DiagnosticsSaveJAB"), F)
      if(cbGetCurrValue(dfp, "resamp_Data2") != ""){
	# Cannot do tiltAfterBootstrap if Data2 is supplied
	dfp <- cbSetCurrValue(dfp, "boot_DiagnosticsDoTAB", F)
	dfp <- cbSetEnableFlag(dfp, c("boot_DiagnosticsDoTAB",
				     "boot_DiagnosticsPlotTAB",
				     "boot_DiagnosticsSaveTAB"), F)
      }
    }
  }
  # Set enable flags for Save & Plot according to values of DoJAB & DoTAB
  if(cbIsNewOrChange(dfp, "boot_DiagnosticsDoTAB"))
    dfp <- cbAssignEnableFlag(dfp, c("boot_DiagnosticsSaveTAB",
				    "boot_DiagnosticsPlotTAB"),
			     "boot_DiagnosticsDoTAB")
  if(cbIsNewOrChange(dfp, "boot_DiagnosticsDoJAB"))
    dfp <- cbAssignEnableFlag(dfp, c("boot_DiagnosticsSaveJAB",
				    "boot_DiagnosticsPlotJABinfluence",
				    "boot_DiagnosticsPlotJAB"),
			     "boot_DiagnosticsDoJAB")
  # Allow input for formula if L method is ace or regression
  if(cbIsNewOrChange(dfp, "boot_LinearApproxL"))
    dfp <- cbSetEnableFlag(dfp, "boot_LinearApproxFormula",
			  is.element(cbGetCurrValue(dfp, "boot_LinearApproxL"),
				     c("ace", "regression")))

  if( cbIsUpdateMessage( dfp )) {
    activeprop <- cbGetActiveProp(dfp)
    switch( activeprop,
	   "resamp_sampler" = {
	   },
	   "boot_DiagnosticsSaveJAB",
	   "boot_DiagnosticsSaveTAB" = {
             print(cbGetCurrValue(dfp, "resamp_SaveAs"))
	     if(nchar(cbGetCurrValue(dfp, "resamp_SaveAs")) == 0){
	       warning("Must save bootstrap object to do diagnostics;",
		       "I'll save as save.boot.")
	       dfp <- cbSetCurrValue(dfp, "resamp_SaveAs", "save.boot")
	     }
	   }
	   )				# end: switch
  }
  return(dfp)
}



createMenuBootstrap <- function() {
  resample.name <- "SPlusMenuBar$Statistics$Resample"

  guiCreate( "MenuItem",
            Name = paste(resample.name,"$BootstrapResample", sep=""),
            Type = "MenuItem",
            Action = "Function",
            MenuItemText = "Bootstrap...",
            Command = "menuBootstrapResample",
	    Overwrite = F,
            Index = "3",
	    )

  invisible()
}

removeMenuBootstrap <- function()
{
  menu.item.name <- "SPlusMenuBar$Statistics$Resample$BootstrapResample"
  if(is.element(menu.item.name, guiGetObjectNames("MenuItem")))
    guiRemove("MenuItem",Name = menu.item.name )

  invisible()
}


# createMenuBootstrap()

"Done with guiBootstrap.ssc" # for script file input

