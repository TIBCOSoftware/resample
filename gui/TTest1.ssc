#############################################################################
# This file contains the gui specs for
# the dialog box that comes up when you select from the SPlusMenuBar
#   "Statistics"  "Compare Samples"  "One Sample" "t Test/Resample..."
# The dialog box is named "One-sample t Test"
#
# This file also contains:
#   menuTTest1resample  - the menu function
#   backTTest1resample  - the call back function
#   createMenuTTest1resample - add or ...
#   removeMenuTTest1resample - remove menu "One-sample t Test"
#############################################################################

newProperty(Name = "resampPage_TTest1", Type = "Page",
	    DialogPrompt = "t Test",
	    PropertyList=c(
	      "SPropDataXG",
	      "resampGroup_TrimMean",
	      "SPropHTestG",
	      "SPropConfIntervalG",
	      "SPropResultsG",
	      "SPropFSpace1"
	      ),
	    )

resampFormatArgumentList <- function(...){
  v <- c(...)
  paste("#", seq(from=0, length=length(v)), "=", v, sep="")
}

newFunctionInfo(Name = "menuTTest1resample",
		DialogHeader = "One-sample t Test",
		CallBackFunction = "backTTest1resample",
                HelpCommand = 'help("function_menuTTest1resample")',
		PropertyList = c(
		  "resampPage_TTest1",
		  "resampPage_boot"
		  ),
		ArgumentList = resampFormatArgumentList(
		  # defaults are defined by properties, comments here may be wrong
		  "SPropSaveObj",
		  "SPropDataX",
		  "SPropVariableX",
		  "SPropMu",
		  "SPropAlternative",
		  "SPropConfLevel",
		  "SPropPrintObjP",
		  "resamp_Trim",	# In percent

		  "resamp_performBoot",	# F
		  "resamp_B1000_7",	# "1000",
		  "resamp_sampler7",
		  "resamp_strata7",	# ""
		  "resamp_seed7",
		  "resamp_Percentiles7", # T
		  "resamp_BCa7",	# T
		  "resamp_Tilting7",	# T
		  "resamp_tLimits7",
		  "resamp_Levels7",	# c(25, 50, 950, 975)/1000
		  "resamp_Histogram7",	# F
		  "resamp_QQ7",		# F
		  "resamp_PlotBoth7",	# T
		  "resamp_SaveAs7",	# ""
		  "resamp_Additional7"	# ""
		  )
		)

rm(resampFormatArgumentList)

# This is the menu function for the one-sample t test dialog
# Default values here are irrelevant - passed from FunctionInfo & properties
menuTTest1resample <-
function(data = NULL, x,
	 mu = 0, alternative = "two.sided",
	 conf.level = 0.95, print.object.p = T,
	 trimPercent = 0,  # in percent

	 boot.perform = F,
	 boot.B = NULL,
	 boot.sampler = "",
	 boot.group = "",
	 boot.seed = NULL,
	 boot.summ.emp = T,
	 boot.summ.bca = T,
	 boot.summ.tilt = T,
	 boot.summ.tLimits = F,
	 boot.summ.probs = ".025, .05, .95, .975",
	 boot.plot.dist = F,
	 boot.plot.QQ = F,
	 boot.plot.both = T,
	 boot.save.obj = "",
	 boot.additional.args = ""
	 )
{
  test <- match.call()
  xCall <- substitute( x )
  dataCall <- substitute( data )
  xLab <- deparse(xCall)
  dataLab <- deparse(dataCall)

  parseText <- function(..., sep="")
    parse(text = paste(..., sep=sep))[[1]]

  DEBUG <- (exists( ".resample.debug" ) && .resample.debug)
  if(DEBUG){
    cat( "AT BEGINNING of menuTTest1resample function.\n" )
    print( match.call() )
    cat( "x call:  " ); print( xCall )
  }

  test[[1]] <- as.name("saddlepoint.test")
  test.args <- is.element(names(test), names(saddlepoint.test))
  test <- test[test.args]
  name.x <- if(is.null(data)) xLab else paste(xLab, "in", dataLab)
  test$x <- (if(is.null(data)) xCall else
	    if(is.data.frame(data)) parseText(dataLab, "$", xLab) else
	    parseText(as.character(dataLab), "[,'", as.character(xLab), "']")
	    )
  byStrata <- !missing(boot.group)
  if(trimPercent == 0){			# ordinary mean, call saddlepoint.test()
    htest.obj <- eval(test, local=F)
    htest.obj$data.name <- name.x

    if(as.logical(print.object.p)){
      print(htest.obj)
      if(byStrata)
	cat("\nPreceding results do not take stratification into account\n",
	    "so p-values and confidence intervals are not reliable.\n")
    }
  }
  else {			  # trimmed mean, do not call t.test()
    Call <- Quote(mean(x=x, trim=0))
    Call$x <- test$x		     # reuse the name calculated above
    if(trimPercent < 0 || trimPercent > 50)
      warning("Trim percentage should be between 0 and 50%")
    Call$trim <- trimPercent / 100
    htest.obj <- eval(Call, local=F)
    # Not an htest object, but convenient to use the same name.
    if(as.logical(print.object.p))
      cat(sep="", trimPercent, "% trimmed mean",
	  if(length(htest.obj) > 1) "s",
	  ":  ", format(htest.obj), "\n")
  }

  if(missing(boot.perform) || !boot.perform)
    return(invisible(htest.obj))


  ##### Bootstrap
  if(DEBUG) cat( "PERFORMING BOOTSTRAP\n" )

  # data arguments
  if(!is.null(data)){
    if(is.data.frame(data)){
      # This supports simple variable names, not expressions
      xCall <- parseText(dataLab, "$", xLab)
      if(byStrata)
	boot.group <- parseText(dataLab, "$", deparse(substitute(boot.group)))
    }
    else if(is.matrix(data)){
      xCall <- parseText(dataLab, "[,'", xLab, "']")
      if(byStrata)
	boot.group <- parseText(dataLab, "[,'",
			       deparse(substitute(boot.group)), "']")
    }
    else
      stop("Data set must be a matrix or data frame")
  }

  #
  # Set up bootstrap call
  boot.call <- call( "bootstrap" )
  boot.call$data <- xCall
  boot.call$statistic <- as.name("mean")
  if(trimPercent){
    boot.call$args.stat <- list(trim = trimPercent/100)
    boot.call$label <- paste(sep="", "bootstrap ",
			    trimPercent, "% trimmed mean: ",
			    deparse(xCall))
  }
  boot.call$B <- boot.B
  if(boot.B == 1000) boot.call$B <- NULL

  if( !missing( boot.sampler ))
    boot.call$sampler <- substitute( boot.sampler )
  if(identical(boot.call$sampler, as.name("samp.bootstrap")))
    boot.call$sampler <- NULL

  if(byStrata)
    boot.call$group <- boot.group

  boot.call$seed <- boot.seed

  if(!missing(boot.additional.args))
    boot.call <- resampAddArgumentsToCall(boot.call, boot.additional.args)

  # If tilting, save indices, unless set explicitly
  if(boot.summ.tilt && is.null(boot.call$save.indices))
    boot.call$save.indices <- T

  if(DEBUG){
    cat( "boot.call:\n" )
    print(boot.call )
  }

  #
  # Call bootstrap (evaluated at top level)
  boot.obj <- eval( boot.call, local=F )
  if( !missing( boot.save.obj ) && boot.save.obj != "" )
    assign( boot.save.obj, boot.obj, where = 1, immediate = T)

  #
  # Call summary and plot functions
  tabSummary.bootstrap(boot.obj, boot.summ.probs,
		       printSummary = T,
		       boot.summ.emp, boot.summ.bca,
		       correlations = F,
		       boot.summ.tilt, boot.summ.tLimits)
  tabPlot.resamp(boot.obj, boot.plot.dist, boot.plot.QQ, boot.plot.both )


  invisible(htest.obj)
}


# original is backOneSample
backTTest1resample <- function(dfp){
  dfp <- backOneSample(dfp)
  dfp <- backResampBoot(dfp, "SPropDataX")
  # If data frame entered and has only one variable, select it
  if(cbIsChange(dfp, "SPropDataX") || cbIsInitDialogMessage(dfp)){
    variables <- cbGetColumnNames(cbGetCurrValue(dfp, "SPropDataX"))
    if(length(variables) == 1)
      dfp["SPropVariableX", "value"] <- variables
  }
  if(cbIsDone(dfp) &&
     cbGetCurrValue(dfp, "SPropVariableX") == "" &&
     (Name <- cbGetCurrValue(dfp, "SPropDataX")) != "" &&
     !is.data.frame(get(Name))){
    cat("Perhaps you should move ", Name, " to the variable field.\n")
    # move the "Data" entry to "Variable", clear the data entry (didn't work)
    # dfp _ cbSetCurrValue(dfp, "SPropVariableX",
    #			  cbGetCurrValue(dfp, "SPropDataX"))
    # dfp _ cbSetCurrValue(dfp, "SPropDataX", "")
    guiModifyDialog( cbGetDialogId(dfp), "SPropDataX", "")
  }
  dfp
}

createMenuTTest1resample <- function() {
  menu.name <- "SPlusMenuBar$Statistics$Compare Samples$One-sample"

  guiCreate( "MenuItem",
            Name = paste(menu.name,"$t-testResample", sep=""),
            Type = "MenuItem",
            Action = "Function",
            MenuItemText = "t Test/Resample...",
            Command = "menuTTest1resample",
	    Overwrite = F,
            Index = "2")
  invisible()
}

removeMenuTTest1resample <- function() {
  menu.item.name <- "SPlusMenuBar$Statistics$Compare Samples$One-sample$t-testResample"
  if(is.element(menu.item.name, guiGetObjectNames("MenuItem")))
    guiRemove("MenuItem", Name = menu.item.name)
  invisible()
}

"Done with TTest1.ssc" # for script file input
